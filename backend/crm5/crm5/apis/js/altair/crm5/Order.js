// --------------------------------------------------------------------------------
// Autogenerated by Altair One content definition compiler.
// Do not modify this file.
// --------------------------------------------------------------------------------
//Created from  JsCdefTemplate

const Session = require('@altair/system').Session
const ContentRef = require('@altair/system').ContentRef
const ActionExecOptions = require('@altair/system').ActionExecOptions
const Content = require('@altair/system').Content
const OrderUpdateOrder = require('./OrderActions').OrderUpdateOrder
const OrderUpdateOrderOutputs = require('./OrderActions').OrderUpdateOrderOutputs
const OrderCreateOrder = require('./OrderActions').OrderCreateOrder
const OrderCreateOrderOutputs = require('./OrderActions').OrderCreateOrderOutputs
const OrderGetAllOrders = require('./OrderActions').OrderGetAllOrders
const OrderGetAllOrdersOutputs = require('./OrderActions').OrderGetAllOrdersOutputs
const OrderDeleteOrder = require('./OrderActions').OrderDeleteOrder
const OrderDeleteOrderOutputs = require('./OrderActions').OrderDeleteOrderOutputs
const OrderGetOrder = require('./OrderActions').OrderGetOrder
const OrderGetOrderOutputs = require('./OrderActions').OrderGetOrderOutputs
const OrderFilterOrders = require('./OrderActions').OrderFilterOrders
const OrderFilterOrdersOutputs = require('./OrderActions').OrderFilterOrdersOutputs
const OrderGetOrderItems = require('./OrderActions').OrderGetOrderItems
const OrderGetOrderItemsOutputs = require('./OrderActions').OrderGetOrderItemsOutputs
const OrderDeleteOrderItems = require('./OrderActions').OrderDeleteOrderItems
const OrderDeleteOrderItemsOutputs = require('./OrderActions').OrderDeleteOrderItemsOutputs

class Order extends Content{
    
    constructor({session}) {
        super({session})
    }

    // PROPERTIES START

    /**
     * Content type
     * 
     * @type {string}
     */
    get contentType() {
        return 'altair.crm5.Order'
    }

    /**
     * name of order
     * 
     * @type string
    */
    get name(){
        return this.get('name')
    }

    set name(value) {
        this.set('name', value)
    }
    /**
     * contact of order 
     * 
     * @type string
    */
    get contact(){
        return this.get('contact')
    }

    set contact(value) {
        this.set('contact', value)
    }
    /**
     * address of order 
     * 
     * @type string
    */
    get address(){
        return this.get('address')
    }

    set address(value) {
        this.set('address', value)
    }
    /**
     * having items or not
     * 
     * @type bool
    */
    get isItems(){
        return this.get('isItems')
    }

    set isItems(value) {
        this.set('isItems', value)
    }

    // PROPERTIES END

    /**
     * content Inline Action 
     * 
     * @param OrderRef inputs.orderRef order ref
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderUpdateOrderActionOutputs } Action outputs
     */
    static async updateOrder({session ,orderRef , execOptions}){
        // create action and set inputs
        let _action = new OrderUpdateOrder({session:session})
        _action.inputs.orderRef = orderRef

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.name name
     * @param string inputs.contact contact
     * @param CustomerRef inputs.customerRef customer reference
     * @param string inputs.address address
     * @param list inputs.items items
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderCreateOrderActionOutputs } Action outputs
     */
    static async createOrder({session ,name ,contact ,customerRef , address, items, execOptions}){
        // create action and set inputs
        let _action = new OrderCreateOrder({session:session})
        _action.inputs.name = name
        _action.inputs.contact = contact
        _action.inputs.customerRef = customerRef
        _action.inputs.address = address
        _action.inputs.items = items

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderGetAllOrdersActionOutputs } Action outputs
     */
    async getAllOrders({   execOptions }){
        // create action and set inputs
        let _action = new OrderGetAllOrders({session:this.session})
        _action.inputs.thisContent = this;

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderDeleteOrderActionOutputs } Action outputs
     */
    async deleteOrder({ id,   execOptions }){
        // create action and set inputs
        let _action = new OrderDeleteOrder({session:this.session})
        _action.inputs.thisContent = this;
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderGetOrderActionOutputs } Action outputs
     */
    static async getOrder({session ,id , execOptions}){
        // create action and set inputs
        let _action = new OrderGetOrder({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.name name
     * @param object inputs.paginationObj pagination object
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderFilterOrdersActionOutputs } Action outputs
     */
    static async filterOrders({session , name, paginationObj, execOptions}){
        // create action and set inputs
        let _action = new OrderFilterOrders({session:session})
        _action.inputs.name = name
        _action.inputs.paginationObj = paginationObj

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id order id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderGetOrderItemsActionOutputs } Action outputs
     */
    static async getOrderItems({session , id, execOptions}){
        // create action and set inputs
        let _action = new OrderGetOrderItems({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.orderId orderId
     * @param string inputs.itemId itemId
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { OrderDeleteOrderItemsActionOutputs } Action outputs
     */
    static async deleteOrderItems({session , orderId, itemId, execOptions}){
        // create action and set inputs
        let _action = new OrderDeleteOrderItems({session:session})
        _action.inputs.orderId = orderId
        _action.inputs.itemId = itemId

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    


    /**
     * Add order_items
     * 
     * @param {Object} inputs Inputs
     * @param {Array<Item> | Item } inputs.order_items order_items
     * @returns {Array<altair.system.Relation>} Relations
     */
    async addOrder_items({ order_items }) {
        return await this.relate({to:order_items, relationName:'order_items'})
    }

    /**
     * Remove order_items
     * 
     * @param {Object} inputs Inputs
     * @param {Array<Item> | Item } inputs.order_items order_items
     */
    async removeOrder_items({ order_items }) {
        await this.unrelate({to:order_items, relationName:'order_items'})
    }

    /**
     * Get order_items
     * 
     * @returns {Array<Item>} order_items
     */
    async getOrder_items() {
        return await this.getRelatedContents({direction:'OUT', relationNames:['order_items']})
    }
    /**
     * Set order_customer
     * 
     * @param {Object} inputs Inputs
     * @param { Customer } inputs.order_customer order_customer
     * @returns {altair.system.Relation} Relation
     */
    async setOrder_customer({ order_customer }) {
        return await this.relate({to:order_customer, relationName:'order_customer'})
    }

    /**
     * Unset order_customer
     * 
     */
    async unsetOrder_customer() {
        let order_customer = await this.getOrder_customer()
        if (order_customer != null) {
            await this.unrelate({to:order_customer, relationName:'order_customer'})
        }
    }

    /**
     * Get order_customer
     * 
     * @returns { Customer | null} order_customer
     */
    async getOrder_customer() {
        let relatedContents = await this.getRelatedContents({direction:'OUT', relationNames:['order_customer']})
        if (relatedContents.length == 0) {
            return null
        }

        if (relatedContents.length > 1) {
            throw new Exception('Found Multiple related order_customer(s) for content ' + this.toString())
        }

        return relatedContents[0]
    }
}

/**
 * Reference class for content definition Order
 * 
 */
class OrderRef extends ContentRef{
    constructor({session}) {
        super({session})
        this.set('contentType', 'altair.crm5.Order')
    }
}

module.exports = { Order, OrderRef }