// --------------------------------------------------------------------------------
// Autogenerated by Altair One content definition compiler.
// Do not modify this file.
// --------------------------------------------------------------------------------
//Created from  JsCdefTemplate

const Session = require('@altair/system').Session
const ContentRef = require('@altair/system').ContentRef
const ActionExecOptions = require('@altair/system').ActionExecOptions
const Content = require('@altair/system').Content
const ItemUpdateItem = require('./ItemActions').ItemUpdateItem
const ItemUpdateItemOutputs = require('./ItemActions').ItemUpdateItemOutputs
const ItemCreateItem = require('./ItemActions').ItemCreateItem
const ItemCreateItemOutputs = require('./ItemActions').ItemCreateItemOutputs
const ItemDeleteItem = require('./ItemActions').ItemDeleteItem
const ItemDeleteItemOutputs = require('./ItemActions').ItemDeleteItemOutputs
const ItemGetAllItems = require('./ItemActions').ItemGetAllItems
const ItemGetAllItemsOutputs = require('./ItemActions').ItemGetAllItemsOutputs
const ItemGetItem = require('./ItemActions').ItemGetItem
const ItemGetItemOutputs = require('./ItemActions').ItemGetItemOutputs
const ItemFilterItems = require('./ItemActions').ItemFilterItems
const ItemFilterItemsOutputs = require('./ItemActions').ItemFilterItemsOutputs
const ItemGetItemOrders = require('./ItemActions').ItemGetItemOrders
const ItemGetItemOrdersOutputs = require('./ItemActions').ItemGetItemOrdersOutputs
const ItemGetItemCustomers = require('./ItemActions').ItemGetItemCustomers
const ItemGetItemCustomersOutputs = require('./ItemActions').ItemGetItemCustomersOutputs

class Item extends Content{
    
    constructor({session}) {
        super({session})
    }

    // PROPERTIES START

    /**
     * Content type
     * 
     * @type {string}
     */
    get contentType() {
        return 'altair.crm5.Item'
    }


    // PROPERTIES END

    /**
     * content Inline Action 
     * 
     * @param ItemRef inputs.itemRef item Ref
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemUpdateItemActionOutputs } Action outputs
     */
    static async updateItem({session ,itemRef , execOptions}){
        // create action and set inputs
        let _action = new ItemUpdateItem({session:session})
        _action.inputs.itemRef = itemRef

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.name name
     * @param float inputs.cost cost
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemCreateItemActionOutputs } Action outputs
     */
    static async createItem({session ,name ,cost , execOptions}){
        // create action and set inputs
        let _action = new ItemCreateItem({session:session})
        _action.inputs.name = name
        _action.inputs.cost = cost

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemDeleteItemActionOutputs } Action outputs
     */
    static async deleteItem({session ,id , execOptions}){
        // create action and set inputs
        let _action = new ItemDeleteItem({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemGetAllItemsActionOutputs } Action outputs
     */
    static async getAllItems({session , execOptions}){
        // create action and set inputs
        let _action = new ItemGetAllItems({session:session})

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemGetItemActionOutputs } Action outputs
     */
    static async getItem({session ,id , execOptions}){
        // create action and set inputs
        let _action = new ItemGetItem({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.name name
     * @param object inputs.paginationObj pagination Object
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemFilterItemsActionOutputs } Action outputs
     */
    static async filterItems({session , name, paginationObj, execOptions}){
        // create action and set inputs
        let _action = new ItemFilterItems({session:session})
        _action.inputs.name = name
        _action.inputs.paginationObj = paginationObj

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id item id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemGetItemOrdersActionOutputs } Action outputs
     */
    static async getItemOrders({session , id, execOptions}){
        // create action and set inputs
        let _action = new ItemGetItemOrders({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id itemId
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { ItemGetItemCustomersActionOutputs } Action outputs
     */
    static async getItemCustomers({session , id, execOptions}){
        // create action and set inputs
        let _action = new ItemGetItemCustomers({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    


}

/**
 * Reference class for content definition Item
 * 
 */
class ItemRef extends ContentRef{
    constructor({session}) {
        super({session})
        this.set('contentType', 'altair.crm5.Item')
    }
}

module.exports = { Item, ItemRef }