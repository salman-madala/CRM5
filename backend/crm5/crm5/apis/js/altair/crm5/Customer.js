// --------------------------------------------------------------------------------
// Autogenerated by Altair One content definition compiler.
// Do not modify this file.
// --------------------------------------------------------------------------------
//Created from  JsCdefTemplate

const Session = require('@altair/system').Session
const ContentRef = require('@altair/system').ContentRef
const ActionExecOptions = require('@altair/system').ActionExecOptions
const Content = require('@altair/system').Content
const CustomerCreateCustomer = require('./CustomerActions').CustomerCreateCustomer
const CustomerCreateCustomerOutputs = require('./CustomerActions').CustomerCreateCustomerOutputs
const CustomerDeleteCustomer = require('./CustomerActions').CustomerDeleteCustomer
const CustomerDeleteCustomerOutputs = require('./CustomerActions').CustomerDeleteCustomerOutputs
const CustomerGetCustomer = require('./CustomerActions').CustomerGetCustomer
const CustomerGetCustomerOutputs = require('./CustomerActions').CustomerGetCustomerOutputs
const CustomerGetAllCustomers = require('./CustomerActions').CustomerGetAllCustomers
const CustomerGetAllCustomersOutputs = require('./CustomerActions').CustomerGetAllCustomersOutputs
const CustomerFilterCustomers = require('./CustomerActions').CustomerFilterCustomers
const CustomerFilterCustomersOutputs = require('./CustomerActions').CustomerFilterCustomersOutputs
const CustomerSearchCustomer = require('./CustomerActions').CustomerSearchCustomer
const CustomerSearchCustomerOutputs = require('./CustomerActions').CustomerSearchCustomerOutputs
const CustomerUpdateCustomer = require('./CustomerActions').CustomerUpdateCustomer
const CustomerUpdateCustomerOutputs = require('./CustomerActions').CustomerUpdateCustomerOutputs
const CustomerGetCustomerOrders = require('./CustomerActions').CustomerGetCustomerOrders
const CustomerGetCustomerOrdersOutputs = require('./CustomerActions').CustomerGetCustomerOrdersOutputs
const CustomerCreateCustomerFiles = require('./CustomerActions').CustomerCreateCustomerFiles
const CustomerCreateCustomerFilesOutputs = require('./CustomerActions').CustomerCreateCustomerFilesOutputs
const CustomerGetCustomerFiles = require('./CustomerActions').CustomerGetCustomerFiles
const CustomerGetCustomerFilesOutputs = require('./CustomerActions').CustomerGetCustomerFilesOutputs
const CustomerCreateCustomerCustomFiles = require('./CustomerActions').CustomerCreateCustomerCustomFiles
const CustomerCreateCustomerCustomFilesOutputs = require('./CustomerActions').CustomerCreateCustomerCustomFilesOutputs
const CustomerCreateCustomerEvent = require('./CustomerEvents').CustomerCreateCustomerEvent

class Customer extends Content{
    
    constructor({session}) {
        super({session})
    }

    // PROPERTIES START

    /**
     * Content type
     * 
     * @type {string}
     */
    get contentType() {
        return 'altair.crm5.Customer'
    }

    /**
     * name of the customer
     * 
     * @type string
    */
    get name(){
        return this.get('name')
    }

    set name(value) {
        this.set('name', value)
    }
    /**
     * email of the customer
     * 
     * @type string
    */
    get email(){
        return this.get('email')
    }

    set email(value) {
        this.set('email', value)
    }
    /**
     * image of the customer
     * 
     * @type string
    */
    get imageId(){
        return this.get('imageId')
    }

    set imageId(value) {
        this.set('imageId', value)
    }

    // PROPERTIES END

    /**
     * content Inline Action 
     * 
     * @param string inputs.name name
     * @param string inputs.email email
     * @param string inputs.imageId imageId
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerCreateCustomerActionOutputs } Action outputs
     */
    static async createCustomer({session , name, email, imageId, execOptions}){
        // create action and set inputs
        let _action = new CustomerCreateCustomer({session:session})
        _action.inputs.name = name
        _action.inputs.email = email
        _action.inputs.imageId = imageId

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerDeleteCustomerActionOutputs } Action outputs
     */
    static async deleteCustomer({session , id, execOptions}){
        // create action and set inputs
        let _action = new CustomerDeleteCustomer({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerGetCustomerActionOutputs } Action outputs
     */
    static async getCustomer({session , id, execOptions}){
        // create action and set inputs
        let _action = new CustomerGetCustomer({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerGetAllCustomersActionOutputs } Action outputs
     */
    static async getAllCustomers({session , execOptions}){
        // create action and set inputs
        let _action = new CustomerGetAllCustomers({session:session})

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.val name filter
     * @param object inputs.paginationObj pagination object
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerFilterCustomersActionOutputs } Action outputs
     */
    static async filterCustomers({session , val, paginationObj, execOptions}){
        // create action and set inputs
        let _action = new CustomerFilterCustomers({session:session})
        _action.inputs.val = val
        _action.inputs.paginationObj = paginationObj

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.name search value
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerSearchCustomerActionOutputs } Action outputs
     */
    static async searchCustomer({session , name, execOptions}){
        // create action and set inputs
        let _action = new CustomerSearchCustomer({session:session})
        _action.inputs.name = name

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id string
     * @param CustomerRef inputs.customer customer Ref
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerUpdateCustomerActionOutputs } Action outputs
     */
    static async updateCustomer({session , id, customer, execOptions}){
        // create action and set inputs
        let _action = new CustomerUpdateCustomer({session:session})
        _action.inputs.id = id
        _action.inputs.customer = customer

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id customer id
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerGetCustomerOrdersActionOutputs } Action outputs
     */
    static async getCustomerOrders({session , id, execOptions}){
        // create action and set inputs
        let _action = new CustomerGetCustomerOrders({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param FileEntityRef inputs.fileRef files list
     * @param CustomerRef inputs.customerRef customerRef
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerCreateCustomerFilesActionOutputs } Action outputs
     */
    static async createCustomerFiles({session , fileRef, customerRef, execOptions}){
        // create action and set inputs
        let _action = new CustomerCreateCustomerFiles({session:session})
        _action.inputs.fileRef = fileRef
        _action.inputs.customerRef = customerRef

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param CustomerRef inputs.customerRef customer files
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerGetCustomerFilesActionOutputs } Action outputs
     */
    static async getCustomerFiles({session , customerRef, execOptions}){
        // create action and set inputs
        let _action = new CustomerGetCustomerFiles({session:session})
        _action.inputs.customerRef = customerRef

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param CustomFileEntityRef inputs.fileObj description
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomerCreateCustomerCustomFilesActionOutputs } Action outputs
     */
    static async createCustomerCustomFiles({session , fileObj, execOptions}){
        // create action and set inputs
        let _action = new CustomerCreateCustomerCustomFiles({session:session})
        _action.inputs.fileObj = fileObj

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    

    /**
     * Emit event. Sample static Content Event
     * 
     * @param CustomerRef inputs.customerRef customer Reference
     */
    async emitCreateCustomerEvent({ customerRef   }){
        let resource = this.getRef().toString().replaceAll(".", "_")
        await CustomerCreateCustomerEvent.New({ customerRef,   thisContent:this}).emit()
    }

    /**
     * Handle event. Sample static Content Event
     * 
     * @param {Object} inputs Inputs
     * @param {object} inputs.handler handler function
     */
    async onCreateCustomerEvent({  handler }){
        let session = this.session
        let resource = this.getRef().toString().replaceAll(".", "_")
    
        let _topic = 'altair_crm5_CustomerCreateCustomerEvent.' + resource
        await Event.SocketConnect({session: session})
        await Event.SubscribeSocket({session: session, topic: _topic, handler})
    }


    /**
     * Add customer_files
     * 
     * @param {Object} inputs Inputs
     * @param {Array<FileEntity> | FileEntity } inputs.customer_files customer_files
     * @returns {Array<altair.system.Relation>} Relations
     */
    async addCustomer_files({ customer_files }) {
        return await this.relate({to:customer_files, relationName:'customer_files'})
    }

    /**
     * Remove customer_files
     * 
     * @param {Object} inputs Inputs
     * @param {Array<FileEntity> | FileEntity } inputs.customer_files customer_files
     */
    async removeCustomer_files({ customer_files }) {
        await this.unrelate({to:customer_files, relationName:'customer_files'})
    }

    /**
     * Get customer_files
     * 
     * @returns {Array<FileEntity>} customer_files
     */
    async getCustomer_files() {
        return await this.getRelatedContents({direction:'OUT', relationNames:['customer_files']})
    }
    /**
     * Add customer_customFiles
     * 
     * @param {Object} inputs Inputs
     * @param {Array<CustomFileEntity> | CustomFileEntity } inputs.customer_customFiles customer_customFiles
     * @returns {Array<altair.system.Relation>} Relations
     */
    async addCustomer_customFiles({ customer_customFiles }) {
        return await this.relate({to:customer_customFiles, relationName:'customer_customFiles'})
    }

    /**
     * Remove customer_customFiles
     * 
     * @param {Object} inputs Inputs
     * @param {Array<CustomFileEntity> | CustomFileEntity } inputs.customer_customFiles customer_customFiles
     */
    async removeCustomer_customFiles({ customer_customFiles }) {
        await this.unrelate({to:customer_customFiles, relationName:'customer_customFiles'})
    }

    /**
     * Get customer_customFiles
     * 
     * @returns {Array<CustomFileEntity>} customer_customFiles
     */
    async getCustomer_customFiles() {
        return await this.getRelatedContents({direction:'OUT', relationNames:['customer_customFiles']})
    }
}

/**
 * Reference class for content definition Customer
 * 
 */
class CustomerRef extends ContentRef{
    constructor({session}) {
        super({session})
        this.set('contentType', 'altair.crm5.Customer')
    }
}

module.exports = { Customer, CustomerRef }