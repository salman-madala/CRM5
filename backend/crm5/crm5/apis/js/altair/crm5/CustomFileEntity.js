// --------------------------------------------------------------------------------
// Autogenerated by Altair One content definition compiler.
// Do not modify this file.
// --------------------------------------------------------------------------------
//Created from  JsCdefTemplate

const Session = require('@altair/system').Session
const ContentRef = require('@altair/system').ContentRef
const ActionExecOptions = require('@altair/system').ActionExecOptions
const Content = require('@altair/system').Content
const CustomFileEntityCreateFile = require('./CustomFileEntityActions').CustomFileEntityCreateFile
const CustomFileEntityCreateFileOutputs = require('./CustomFileEntityActions').CustomFileEntityCreateFileOutputs
const CustomFileEntityGetFiles = require('./CustomFileEntityActions').CustomFileEntityGetFiles
const CustomFileEntityGetFilesOutputs = require('./CustomFileEntityActions').CustomFileEntityGetFilesOutputs
const CustomFileEntityUpdateFile = require('./CustomFileEntityActions').CustomFileEntityUpdateFile
const CustomFileEntityUpdateFileOutputs = require('./CustomFileEntityActions').CustomFileEntityUpdateFileOutputs
const CustomFileEntityDeleteFile = require('./CustomFileEntityActions').CustomFileEntityDeleteFile
const CustomFileEntityDeleteFileOutputs = require('./CustomFileEntityActions').CustomFileEntityDeleteFileOutputs

class CustomFileEntity extends Content{
    
    constructor({session}) {
        super({session})
    }

    // PROPERTIES START

    /**
     * Content type
     * 
     * @type {string}
     */
    get contentType() {
        return 'altair.crm5.CustomFileEntity'
    }

    /**
     * Description of a file
     * 
     * @type string
    */
    get description(){
        return this.get('description')
    }

    set description(value) {
        this.set('description', value)
    }
    /**
     * isFile Lock or not
     * 
     * @type bool
    */
    get isLock(){
        return this.get('isLock')
    }

    set isLock(value) {
        this.set('isLock', value)
    }
    /**
     * 
     * 
     * @type object
    */
    get contentRef(){
        return this.get('contentRef')
    }

    set contentRef(value) {
        this.set('contentRef', value)
    }
    /**
     *  file Ref
     * 
     * @type FileEntityRef
    */
    get fileRef(){
        return this.get('fileRef')
    }

    set fileRef(value) {
        this.set('fileRef', value)
    }

    // PROPERTIES END

    /**
     * content Inline Action 
     * 
     * @param object inputs.contentRef contentRef of (customer/item/order)
     * @param string inputs.description description
     * @param bool inputs.islock is lock
     * @param FileEntityRef inputs.fileRef file Ref
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomFileEntityCreateFileActionOutputs } Action outputs
     */
    static async createFile({session , contentRef, description, islock, fileRef, execOptions}){
        // create action and set inputs
        let _action = new CustomFileEntityCreateFile({session:session})
        _action.inputs.contentRef = contentRef
        _action.inputs.description = description
        _action.inputs.islock = islock
        _action.inputs.fileRef = fileRef

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param object inputs.contentRef contnet ref (customer/item/order)
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomFileEntityGetFilesActionOutputs } Action outputs
     */
    static async getFiles({session , contentRef, execOptions}){
        // create action and set inputs
        let _action = new CustomFileEntityGetFiles({session:session})
        _action.inputs.contentRef = contentRef

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id customFileId
     * @param string inputs.description description
     * @param bool inputs.islock islock
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomFileEntityUpdateFileActionOutputs } Action outputs
     */
    static async updateFile({session , id, description, islock, execOptions}){
        // create action and set inputs
        let _action = new CustomFileEntityUpdateFile({session:session})
        _action.inputs.id = id
        _action.inputs.description = description
        _action.inputs.islock = islock

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    
    /**
     * content Inline Action 
     * 
     * @param string inputs.id customFileId
     * @param {altair.system.ActionExecOptions} inputs.execOptions Action execution options
     * @returns { CustomFileEntityDeleteFileActionOutputs } Action outputs
     */
    static async deleteFile({session , id, execOptions}){
        // create action and set inputs
        let _action = new CustomFileEntityDeleteFile({session:session})
        _action.inputs.id = id

        // execute action
        await _action.execute(execOptions)
        return _action.outputs
    }
    


    /**
     * Set CustomFileEntity_files
     * 
     * @param {Object} inputs Inputs
     * @param { FileEntity } inputs.CustomFileEntity_files CustomFileEntity_files
     * @returns {altair.system.Relation} Relation
     */
    async setCustomFileEntity_files({ CustomFileEntity_files }) {
        return await this.relate({to:CustomFileEntity_files, relationName:'CustomFileEntity_files'})
    }

    /**
     * Unset CustomFileEntity_files
     * 
     */
    async unsetCustomFileEntity_files() {
        let CustomFileEntity_files = await this.getCustomFileEntity_files()
        if (CustomFileEntity_files != null) {
            await this.unrelate({to:CustomFileEntity_files, relationName:'CustomFileEntity_files'})
        }
    }

    /**
     * Get CustomFileEntity_files
     * 
     * @returns { FileEntity | null} CustomFileEntity_files
     */
    async getCustomFileEntity_files() {
        let relatedContents = await this.getRelatedContents({direction:'OUT', relationNames:['CustomFileEntity_files']})
        if (relatedContents.length == 0) {
            return null
        }

        if (relatedContents.length > 1) {
            throw new Exception('Found Multiple related CustomFileEntity_files(s) for content ' + this.toString())
        }

        return relatedContents[0]
    }
}

/**
 * Reference class for content definition CustomFileEntity
 * 
 */
class CustomFileEntityRef extends ContentRef{
    constructor({session}) {
        super({session})
        this.set('contentType', 'altair.crm5.CustomFileEntity')
    }
}

module.exports = { CustomFileEntity, CustomFileEntityRef }