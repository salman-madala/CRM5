# --------------------------------------------------------------------------------
# Autogenerated by Altair One content definition compiler.
# Do not modify this file.
# --------------------------------------------------------------------------------

from altair.system import Session
from altair.system import ContentRef
from altair.system import Relation
from altair.system import ActionExecOptions
from altair.system import Content
from .CustomFileEntityActions import CustomFileEntityCreateFile
from .CustomFileEntityActions import CustomFileEntityCreateFileOutputs
from .CustomFileEntityActions import CustomFileEntityGetFiles
from .CustomFileEntityActions import CustomFileEntityGetFilesOutputs
from .CustomFileEntityActions import CustomFileEntityUpdateFile
from .CustomFileEntityActions import CustomFileEntityUpdateFileOutputs
from .CustomFileEntityActions import CustomFileEntityDeleteFile
from .CustomFileEntityActions import CustomFileEntityDeleteFileOutputs

from typing import Any
from typing import List
from typing import Union
from typing import Callable
from typing import Optional

import typing
if typing.TYPE_CHECKING:
    from altair.system import FileEntity
    from altair.system import FileEntityRef

class CustomFileEntity(Content):
    def __init__(self, session: Session):
        super().__init__(session=session)

    ############# PROPERTIES START ##############

    @property
    def contentType(self):
        '''Content type

        Returns:
            str: Content type
        '''
        return "altair.crm5.CustomFileEntity"

    @property
    def description(self) -> 'str':
        '''description

        Returns:
            str: description
        '''
        return self.get('description')

    @description.setter
    def description(self, value: 'str') -> None:
        '''description

        Args:
            value (str): description
        '''
        self.set('description', value)

    @property
    def isLock(self) -> 'bool':
        '''isLock

        Returns:
            bool: isLock
        '''
        return self.get('isLock')

    @isLock.setter
    def isLock(self, value: 'bool') -> None:
        '''isLock

        Args:
            value (bool): isLock
        '''
        self.set('isLock', value)

    @property
    def contentRef(self) -> 'Any':
        '''contentRef

        Returns:
            Any: contentRef
        '''
        return self.get('contentRef')

    @contentRef.setter
    def contentRef(self, value: 'Any') -> None:
        '''contentRef

        Args:
            value (Any): contentRef
        '''
        self.set('contentRef', value)

    @property
    def fileRef(self) -> 'FileEntityRef':
        '''fileRef

        Returns:
            altair.system.FileEntityRef: fileRef
        '''
        return self.get('fileRef')

    @fileRef.setter
    def fileRef(self, value: 'FileEntityRef') -> None:
        '''fileRef

        Args:
            value (altair.system.FileEntityRef): fileRef
        '''
        self.set('fileRef', value)


    ############## PROPERTIES END ###############

    @staticmethod
    async def createFile(session: Session  ,contentRef: Optional['Any'] = None ,description: Optional['str'] = None ,islock: Optional['bool'] = None ,fileRef: Optional['FileEntityRef'] = None , execOptions: ActionExecOptions = None) -> CustomFileEntityCreateFileOutputs:
        '''Inline action

        Args:
            contentRef (Any): contentRef of (customer/item/order)
            description (str): description
            islock (bool): is lock
            fileRef (FileEntityRef): file Ref
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomFileEntityActions.CustomFileEntityCreateFile.CustomFileEntityCreateFileOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomFileEntityCreateFile(session=session)
        _action.inputs.contentRef = contentRef
        _action.inputs.description = description
        _action.inputs.islock = islock
        _action.inputs.fileRef = fileRef

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getFiles(session: Session  ,contentRef: Optional['Any'] = None , execOptions: ActionExecOptions = None) -> CustomFileEntityGetFilesOutputs:
        '''Inline action

        Args:
            contentRef (Any): contnet ref (customer/item/order)
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomFileEntityActions.CustomFileEntityGetFiles.CustomFileEntityGetFilesOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomFileEntityGetFiles(session=session)
        _action.inputs.contentRef = contentRef

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def updateFile(session: Session  ,id: Optional['str'] = None ,description: Optional['str'] = None ,islock: Optional['bool'] = None , execOptions: ActionExecOptions = None) -> CustomFileEntityUpdateFileOutputs:
        '''Inline action

        Args:
            id (str): customFileId
            description (str): description
            islock (bool): islock
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomFileEntityActions.CustomFileEntityUpdateFile.CustomFileEntityUpdateFileOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomFileEntityUpdateFile(session=session)
        _action.inputs.id = id
        _action.inputs.description = description
        _action.inputs.islock = islock

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def deleteFile(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> CustomFileEntityDeleteFileOutputs:
        '''Inline action

        Args:
            id (str): customFileId
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomFileEntityActions.CustomFileEntityDeleteFile.CustomFileEntityDeleteFileOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomFileEntityDeleteFile(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        


    async def setCustomFileEntity_files(self, CustomFileEntity_files: 'FileEntity') -> Relation:
        '''Set CustomFileEntity_files

        Args:
            CustomFileEntity_files (altair.system.FileEntity): CustomFileEntity_files

        Returns:
            altair.system.Relation: Relation
        '''
        return await self.relate(to=CustomFileEntity_files, relationName='CustomFileEntity_files')

    async def unsetCustomFileEntity_files(self):
        '''Unset CustomFileEntity_files
        '''
        CustomFileEntity_files = await self.getCustomFileEntity_files()
        if CustomFileEntity_files != None:
            await self.unrelate(to=CustomFileEntity_files, relationName='CustomFileEntity_files')

    async def getCustomFileEntity_files(self) -> Union['FileEntity', None]:
        '''Get CustomFileEntity_files

        Returns:
            FileEntity | None: CustomFileEntity_files
        '''
        relatedContents = await self.getRelatedContents(direction='OUT', relationNames=['CustomFileEntity_files'])
        if len(relatedContents) == 0:
            return None

        if len(relatedContents) > 1:
            raise Exception('Found Multiple related CustomFileEntity_files(s) for content ' + str(self))

        return relatedContents[0]
    

class CustomFileEntityRef(ContentRef):
    '''Reference class for content definition CustomFileEntity
    '''
    def __init__(self, session: Session = None):
        super().__init__(session=session)