# --------------------------------------------------------------------------------
# Autogenerated by Altair One content definition compiler.
# Do not modify this file.
# --------------------------------------------------------------------------------

from altair.system import Session
from altair.system import ContentRef
from altair.system import Relation
from altair.system import ActionExecOptions
from altair.system import Content
from .ItemActions import ItemUpdateItem
from .ItemActions import ItemUpdateItemOutputs
from .ItemActions import ItemCreateItem
from .ItemActions import ItemCreateItemOutputs
from .ItemActions import ItemDeleteItem
from .ItemActions import ItemDeleteItemOutputs
from .ItemActions import ItemGetAllItems
from .ItemActions import ItemGetAllItemsOutputs
from .ItemActions import ItemGetItem
from .ItemActions import ItemGetItemOutputs
from .ItemActions import ItemFilterItems
from .ItemActions import ItemFilterItemsOutputs
from .ItemActions import ItemGetItemOrders
from .ItemActions import ItemGetItemOrdersOutputs
from .ItemActions import ItemGetItemCustomers
from .ItemActions import ItemGetItemCustomersOutputs

from typing import Any
from typing import List
from typing import Union
from typing import Callable
from typing import Optional


class Item(Content):
    def __init__(self, session: Session):
        super().__init__(session=session)

    ############# PROPERTIES START ##############

    @property
    def contentType(self):
        '''Content type

        Returns:
            str: Content type
        '''
        return "altair.crm5.Item"


    ############## PROPERTIES END ###############

    @staticmethod
    async def updateItem(session: Session ,itemRef: 'ItemRef'  , execOptions: ActionExecOptions = None) -> ItemUpdateItemOutputs:
        '''Inline action

        Args:
            itemRef (ItemRef): item Ref
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemUpdateItem.ItemUpdateItemOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemUpdateItem(session=session)
        _action.inputs.itemRef = itemRef

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def createItem(session: Session ,name: 'str' ,cost: 'float'  , execOptions: ActionExecOptions = None) -> ItemCreateItemOutputs:
        '''Inline action

        Args:
            name (str): name
            cost (float): cost
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemCreateItem.ItemCreateItemOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemCreateItem(session=session)
        _action.inputs.name = name
        _action.inputs.cost = cost

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def deleteItem(session: Session ,id: 'str'  , execOptions: ActionExecOptions = None) -> ItemDeleteItemOutputs:
        '''Inline action

        Args:
            id (str): id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemDeleteItem.ItemDeleteItemOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemDeleteItem(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getAllItems(session: Session  , execOptions: ActionExecOptions = None) -> ItemGetAllItemsOutputs:
        '''Inline action

        Args:
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemGetAllItems.ItemGetAllItemsOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemGetAllItems(session=session)

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getItem(session: Session ,id: 'str'  , execOptions: ActionExecOptions = None) -> ItemGetItemOutputs:
        '''Inline action

        Args:
            id (str): id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemGetItem.ItemGetItemOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemGetItem(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def filterItems(session: Session  ,name: Optional['str'] = None ,paginationObj: Optional['Any'] = None , execOptions: ActionExecOptions = None) -> ItemFilterItemsOutputs:
        '''Inline action

        Args:
            name (str): name
            paginationObj (Any): pagination Object
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemFilterItems.ItemFilterItemsOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemFilterItems(session=session)
        _action.inputs.name = name
        _action.inputs.paginationObj = paginationObj

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getItemOrders(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> ItemGetItemOrdersOutputs:
        '''Inline action

        Args:
            id (str): item id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemGetItemOrders.ItemGetItemOrdersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemGetItemOrders(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getItemCustomers(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> ItemGetItemCustomersOutputs:
        '''Inline action

        Args:
            id (str): itemId
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.ItemActions.ItemGetItemCustomers.ItemGetItemCustomersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = ItemGetItemCustomers(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        



class ItemRef(ContentRef):
    '''Reference class for content definition Item
    '''
    def __init__(self, session: Session = None):
        super().__init__(session=session)