# --------------------------------------------------------------------------------
# Autogenerated by Altair One content definition compiler.
# Do not modify this file.
# --------------------------------------------------------------------------------

from altair.system import Session
from altair.system import ContentRef
from altair.system import Relation
from altair.system import ActionExecOptions
from altair.system import Content
from .CustomerActions import CustomerCreateCustomer
from .CustomerActions import CustomerCreateCustomerOutputs
from .CustomerActions import CustomerDeleteCustomer
from .CustomerActions import CustomerDeleteCustomerOutputs
from .CustomerActions import CustomerGetCustomer
from .CustomerActions import CustomerGetCustomerOutputs
from .CustomerActions import CustomerGetAllCustomers
from .CustomerActions import CustomerGetAllCustomersOutputs
from .CustomerActions import CustomerFilterCustomers
from .CustomerActions import CustomerFilterCustomersOutputs
from .CustomerActions import CustomerSearchCustomer
from .CustomerActions import CustomerSearchCustomerOutputs
from .CustomerActions import CustomerUpdateCustomer
from .CustomerActions import CustomerUpdateCustomerOutputs
from .CustomerActions import CustomerGetCustomerOrders
from .CustomerActions import CustomerGetCustomerOrdersOutputs
from .CustomerActions import CustomerCreateCustomerFiles
from .CustomerActions import CustomerCreateCustomerFilesOutputs
from .CustomerActions import CustomerGetCustomerFiles
from .CustomerActions import CustomerGetCustomerFilesOutputs
from .CustomerActions import CustomerCreateCustomerCustomFiles
from .CustomerActions import CustomerCreateCustomerCustomFilesOutputs
from .CustomerEvents import CustomerCreateCustomerEvent

from typing import Any
from typing import List
from typing import Union
from typing import Callable
from typing import Optional

import typing
if typing.TYPE_CHECKING:
    from altair.system import FileEntity
    from .CustomFileEntity import CustomFileEntity

class Customer(Content):
    def __init__(self, session: Session):
        super().__init__(session=session)

    ############# PROPERTIES START ##############

    @property
    def contentType(self):
        '''Content type

        Returns:
            str: Content type
        '''
        return "altair.crm5.Customer"

    @property
    def name(self) -> 'str':
        '''name

        Returns:
            str: name
        '''
        return self.get('name')

    @name.setter
    def name(self, value: 'str') -> None:
        '''name

        Args:
            value (str): name
        '''
        self.set('name', value)

    @property
    def email(self) -> 'str':
        '''email

        Returns:
            str: email
        '''
        return self.get('email')

    @email.setter
    def email(self, value: 'str') -> None:
        '''email

        Args:
            value (str): email
        '''
        self.set('email', value)

    @property
    def imageId(self) -> 'str':
        '''imageId

        Returns:
            str: imageId
        '''
        return self.get('imageId')

    @imageId.setter
    def imageId(self, value: 'str') -> None:
        '''imageId

        Args:
            value (str): imageId
        '''
        self.set('imageId', value)


    ############## PROPERTIES END ###############

    @staticmethod
    async def createCustomer(session: Session  ,name: Optional['str'] = None ,email: Optional['str'] = None ,imageId: Optional['str'] = None , execOptions: ActionExecOptions = None) -> CustomerCreateCustomerOutputs:
        '''Inline action

        Args:
            name (str): name
            email (str): email
            imageId (str): imageId
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerCreateCustomer.CustomerCreateCustomerOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerCreateCustomer(session=session)
        _action.inputs.name = name
        _action.inputs.email = email
        _action.inputs.imageId = imageId

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def deleteCustomer(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> CustomerDeleteCustomerOutputs:
        '''Inline action

        Args:
            id (str): id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerDeleteCustomer.CustomerDeleteCustomerOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerDeleteCustomer(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getCustomer(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> CustomerGetCustomerOutputs:
        '''Inline action

        Args:
            id (str): id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerGetCustomer.CustomerGetCustomerOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerGetCustomer(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getAllCustomers(session: Session  , execOptions: ActionExecOptions = None) -> CustomerGetAllCustomersOutputs:
        '''Inline action

        Args:
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerGetAllCustomers.CustomerGetAllCustomersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerGetAllCustomers(session=session)

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def filterCustomers(session: Session  ,val: Optional['str'] = None ,paginationObj: Optional['Any'] = None , execOptions: ActionExecOptions = None) -> CustomerFilterCustomersOutputs:
        '''Inline action

        Args:
            val (str): name filter
            paginationObj (Any): pagination object
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerFilterCustomers.CustomerFilterCustomersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerFilterCustomers(session=session)
        _action.inputs.val = val
        _action.inputs.paginationObj = paginationObj

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def searchCustomer(session: Session  ,name: Optional['str'] = None , execOptions: ActionExecOptions = None) -> CustomerSearchCustomerOutputs:
        '''Inline action

        Args:
            name (str): search value
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerSearchCustomer.CustomerSearchCustomerOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerSearchCustomer(session=session)
        _action.inputs.name = name

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def updateCustomer(session: Session  ,id: Optional['str'] = None ,customer: Optional['CustomerRef'] = None , execOptions: ActionExecOptions = None) -> CustomerUpdateCustomerOutputs:
        '''Inline action

        Args:
            id (str): string
            customer (CustomerRef): customer Ref
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerUpdateCustomer.CustomerUpdateCustomerOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerUpdateCustomer(session=session)
        _action.inputs.id = id
        _action.inputs.customer = customer

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getCustomerOrders(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> CustomerGetCustomerOrdersOutputs:
        '''Inline action

        Args:
            id (str): customer id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerGetCustomerOrders.CustomerGetCustomerOrdersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerGetCustomerOrders(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def createCustomerFiles(session: Session  ,fileRef: Optional['FileEntityRef'] = None ,customerRef: Optional['CustomerRef'] = None , execOptions: ActionExecOptions = None) -> CustomerCreateCustomerFilesOutputs:
        '''Inline action

        Args:
            fileRef (FileEntityRef): files list
            customerRef (CustomerRef): customerRef
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerCreateCustomerFiles.CustomerCreateCustomerFilesOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerCreateCustomerFiles(session=session)
        _action.inputs.fileRef = fileRef
        _action.inputs.customerRef = customerRef

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getCustomerFiles(session: Session  ,customerRef: Optional['CustomerRef'] = None , execOptions: ActionExecOptions = None) -> CustomerGetCustomerFilesOutputs:
        '''Inline action

        Args:
            customerRef (CustomerRef): customer files
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerGetCustomerFiles.CustomerGetCustomerFilesOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerGetCustomerFiles(session=session)
        _action.inputs.customerRef = customerRef

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def createCustomerCustomFiles(session: Session  ,fileObj: Optional['CustomFileEntityRef'] = None , execOptions: ActionExecOptions = None) -> CustomerCreateCustomerCustomFilesOutputs:
        '''Inline action

        Args:
            fileObj (CustomFileEntityRef): description
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.CustomerActions.CustomerCreateCustomerCustomFiles.CustomerCreateCustomerCustomFilesOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = CustomerCreateCustomerCustomFiles(session=session)
        _action.inputs.fileObj = fileObj

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        

    async def emitCreateCustomerEvent(self ,customerRef: 'CustomerRef'  ) -> None:
        '''Emit event. Sample Content Event

        Args:
            customerRef (CustomerRef): customer Reference
        '''
        await CustomerCreateCustomerEvent.New(customerRef=customerRef,   thisContent=self).emit()

    async def onCreateCustomerEvent(self, handler: Callable[[CustomerCreateCustomerEvent], None]) -> None:
        '''Handle event. global event
    
        Args:
            resource (str): Resource string which will be appended to the event contentType to create the topic on which event is emitted
            handler (object): handler function
            session (altair.system.Session): Session
        '''
        session = self.session
        resource = self.getRef().toString().replace(".", "_")
    
        _topic = 'altair_crm5_CustomerCreateCustomerEvent.' + resource
        await Event.SocketConnect(session=session)
        await Event.SubscribeSocket(topic=_topic, handler=handler, session=session)
        

    async def addCustomer_files(self, customer_files: Union[List['FileEntity'], 'FileEntity']) -> List[Relation]:
        '''Add customer_files

        Args:
            customer_files (List[FileEntity] | FileEntity): customer_files

        Returns:
            List[altair.system.Relation]: Relations
        '''
        return await self.relate(to=customer_files, relationName='customer_files')

    async def removeCustomer_files(self, customer_files: Union[List['FileEntity'], 'FileEntity']):
        '''Remove customer_files

        Args:
            customer_files (List[FileEntity] | FileEntity): customer_files
        '''
        await self.unrelate(to=customer_files, relationName='customer_files')

    async def getCustomer_files(self) -> List['FileEntity']:
        '''Get customer_files

        Returns:
            List[FileEntity]: customer_files
        '''
        return await self.getRelatedContents(direction='OUT', relationNames=['customer_files'])    
    
    async def addCustomer_customFiles(self, customer_customFiles: Union[List['CustomFileEntity'], 'CustomFileEntity']) -> List[Relation]:
        '''Add customer_customFiles

        Args:
            customer_customFiles (List[CustomFileEntity] | CustomFileEntity): customer_customFiles

        Returns:
            List[altair.system.Relation]: Relations
        '''
        return await self.relate(to=customer_customFiles, relationName='customer_customFiles')

    async def removeCustomer_customFiles(self, customer_customFiles: Union[List['CustomFileEntity'], 'CustomFileEntity']):
        '''Remove customer_customFiles

        Args:
            customer_customFiles (List[CustomFileEntity] | CustomFileEntity): customer_customFiles
        '''
        await self.unrelate(to=customer_customFiles, relationName='customer_customFiles')

    async def getCustomer_customFiles(self) -> List['CustomFileEntity']:
        '''Get customer_customFiles

        Returns:
            List[CustomFileEntity]: customer_customFiles
        '''
        return await self.getRelatedContents(direction='OUT', relationNames=['customer_customFiles'])    
    

class CustomerRef(ContentRef):
    '''Reference class for content definition Customer
    '''
    def __init__(self, session: Session = None):
        super().__init__(session=session)