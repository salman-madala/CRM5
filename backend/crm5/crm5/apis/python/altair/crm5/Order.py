# --------------------------------------------------------------------------------
# Autogenerated by Altair One content definition compiler.
# Do not modify this file.
# --------------------------------------------------------------------------------

from altair.system import Session
from altair.system import ContentRef
from altair.system import Relation
from altair.system import ActionExecOptions
from altair.system import Content
from .OrderActions import OrderUpdateOrder
from .OrderActions import OrderUpdateOrderOutputs
from .OrderActions import OrderCreateOrder
from .OrderActions import OrderCreateOrderOutputs
from .OrderActions import OrderGetAllOrders
from .OrderActions import OrderGetAllOrdersOutputs
from .OrderActions import OrderDeleteOrder
from .OrderActions import OrderDeleteOrderOutputs
from .OrderActions import OrderGetOrder
from .OrderActions import OrderGetOrderOutputs
from .OrderActions import OrderFilterOrders
from .OrderActions import OrderFilterOrdersOutputs
from .OrderActions import OrderGetOrderItems
from .OrderActions import OrderGetOrderItemsOutputs
from .OrderActions import OrderDeleteOrderItems
from .OrderActions import OrderDeleteOrderItemsOutputs

from typing import Any
from typing import List
from typing import Union
from typing import Callable
from typing import Optional

import typing
if typing.TYPE_CHECKING:
    from .Item import Item
    from .Customer import Customer

class Order(Content):
    def __init__(self, session: Session):
        super().__init__(session=session)

    ############# PROPERTIES START ##############

    @property
    def contentType(self):
        '''Content type

        Returns:
            str: Content type
        '''
        return "altair.crm5.Order"

    @property
    def name(self) -> 'str':
        '''name

        Returns:
            str: name
        '''
        return self.get('name')

    @name.setter
    def name(self, value: 'str') -> None:
        '''name

        Args:
            value (str): name
        '''
        self.set('name', value)

    @property
    def contact(self) -> 'str':
        '''contact

        Returns:
            str: contact
        '''
        return self.get('contact')

    @contact.setter
    def contact(self, value: 'str') -> None:
        '''contact

        Args:
            value (str): contact
        '''
        self.set('contact', value)

    @property
    def address(self) -> 'str':
        '''address

        Returns:
            str: address
        '''
        return self.get('address')

    @address.setter
    def address(self, value: 'str') -> None:
        '''address

        Args:
            value (str): address
        '''
        self.set('address', value)

    @property
    def isItems(self) -> 'bool':
        '''isItems

        Returns:
            bool: isItems
        '''
        return self.get('isItems')

    @isItems.setter
    def isItems(self, value: 'bool') -> None:
        '''isItems

        Args:
            value (bool): isItems
        '''
        self.set('isItems', value)


    ############## PROPERTIES END ###############

    @staticmethod
    async def updateOrder(session: Session ,orderRef: 'OrderRef'  , execOptions: ActionExecOptions = None) -> OrderUpdateOrderOutputs:
        '''Inline action

        Args:
            orderRef (OrderRef): order ref
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderUpdateOrder.OrderUpdateOrderOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderUpdateOrder(session=session)
        _action.inputs.orderRef = orderRef

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def createOrder(session: Session ,name: 'str' ,contact: 'str' ,customerRef: 'CustomerRef'  ,address: Optional['str'] = None ,items: Optional['List[ItemRef]'] = None , execOptions: ActionExecOptions = None) -> OrderCreateOrderOutputs:
        '''Inline action

        Args:
            name (str): name
            contact (str): contact
            customerRef (CustomerRef): customer reference
            address (str): address
            items (List[ItemRef]): items
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderCreateOrder.OrderCreateOrderOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderCreateOrder(session=session)
        _action.inputs.name = name
        _action.inputs.contact = contact
        _action.inputs.customerRef = customerRef
        _action.inputs.address = address
        _action.inputs.items = items

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    
    async def getAllOrders(self  , execOptions: ActionExecOptions = None) -> OrderGetAllOrdersOutputs:
        '''Inline action

        Args:
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderGetAllOrders.OrderGetAllOrdersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderGetAllOrders(session=self.session)
        _action.inputs.thisContent = self

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    
    async def deleteOrder(self ,id: 'str'  , execOptions: ActionExecOptions = None) -> OrderDeleteOrderOutputs:
        '''Inline action

        Args:
            id (str): id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderDeleteOrder.OrderDeleteOrderOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderDeleteOrder(session=self.session)
        _action.inputs.thisContent = self
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getOrder(session: Session ,id: 'str'  , execOptions: ActionExecOptions = None) -> OrderGetOrderOutputs:
        '''Inline action

        Args:
            id (str): id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderGetOrder.OrderGetOrderOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderGetOrder(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def filterOrders(session: Session  ,name: Optional['str'] = None ,paginationObj: Optional['Any'] = None , execOptions: ActionExecOptions = None) -> OrderFilterOrdersOutputs:
        '''Inline action

        Args:
            name (str): name
            paginationObj (Any): pagination object
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderFilterOrders.OrderFilterOrdersOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderFilterOrders(session=session)
        _action.inputs.name = name
        _action.inputs.paginationObj = paginationObj

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def getOrderItems(session: Session  ,id: Optional['str'] = None , execOptions: ActionExecOptions = None) -> OrderGetOrderItemsOutputs:
        '''Inline action

        Args:
            id (str): order id
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderGetOrderItems.OrderGetOrderItemsOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderGetOrderItems(session=session)
        _action.inputs.id = id

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        
    @staticmethod
    async def deleteOrderItems(session: Session  ,orderId: Optional['str'] = None ,itemId: Optional['str'] = None , execOptions: ActionExecOptions = None) -> OrderDeleteOrderItemsOutputs:
        '''Inline action

        Args:
            orderId (str): orderId
            itemId (str): itemId
            execOptions (atlair.system.ActionExecOptions): Action execution options
            session (altair.system.Session): Session for action

        Returns:
            altair.crm5.OrderActions.OrderDeleteOrderItems.OrderDeleteOrderItemsOutputs: Action Outputs
        '''
        # create action and set inputs
        _action = OrderDeleteOrderItems(session=session)
        _action.inputs.orderId = orderId
        _action.inputs.itemId = itemId

        # execute action
        await _action.execute(execOptions)
        return _action.outputs
        


    async def addOrder_items(self, order_items: Union[List['Item'], 'Item']) -> List[Relation]:
        '''Add order_items

        Args:
            order_items (List[Item] | Item): order_items

        Returns:
            List[altair.system.Relation]: Relations
        '''
        return await self.relate(to=order_items, relationName='order_items')

    async def removeOrder_items(self, order_items: Union[List['Item'], 'Item']):
        '''Remove order_items

        Args:
            order_items (List[Item] | Item): order_items
        '''
        await self.unrelate(to=order_items, relationName='order_items')

    async def getOrder_items(self) -> List['Item']:
        '''Get order_items

        Returns:
            List[Item]: order_items
        '''
        return await self.getRelatedContents(direction='OUT', relationNames=['order_items'])    
    
    async def setOrder_customer(self, order_customer: 'Customer') -> Relation:
        '''Set order_customer

        Args:
            order_customer (Customer): order_customer

        Returns:
            altair.system.Relation: Relation
        '''
        return await self.relate(to=order_customer, relationName='order_customer')

    async def unsetOrder_customer(self):
        '''Unset order_customer
        '''
        order_customer = await self.getOrder_customer()
        if order_customer != None:
            await self.unrelate(to=order_customer, relationName='order_customer')

    async def getOrder_customer(self) -> Union['Customer', None]:
        '''Get order_customer

        Returns:
            Customer | None: order_customer
        '''
        relatedContents = await self.getRelatedContents(direction='OUT', relationNames=['order_customer'])
        if len(relatedContents) == 0:
            return None

        if len(relatedContents) > 1:
            raise Exception('Found Multiple related order_customer(s) for content ' + str(self))

        return relatedContents[0]
    

class OrderRef(ContentRef):
    '''Reference class for content definition Order
    '''
    def __init__(self, session: Session = None):
        super().__init__(session=session)