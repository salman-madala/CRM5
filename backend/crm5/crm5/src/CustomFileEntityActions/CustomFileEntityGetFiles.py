# --------------------------------------------------------------------------------
# stubs for action CustomFileEntityGetFiles generated by Altair One content definition compiler.
# CustomFileEntityGetFilesPre  [optional] precheck and setup resources required for action.
# CustomFileEntityGetFilesRun  business logic of action and set outputs.
# CustomFileEntityGetFilesPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext,Content,Search,Fs
from altair.crm5 import CustomFileEntityGetFilesInputs
from altair.crm5 import CustomFileEntityGetFilesOutputs


async def CustomFileEntityGetFilesRun(inputs: CustomFileEntityGetFilesInputs, outputs: CustomFileEntityGetFilesOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (CustomFileEntityGetFilesInputs): action inputs
        outputs (CustomFileEntityGetFilesOutputs): action outputs
        context (ActionContext): action context
    '''
    # customerRef = await Content.getByRef(session=context.session,contentRef=inputs.customerRef)
    # files=await customerRef.content.getRelatedContents(direction="OUT", relationNames=['customer_files'])
    # outputs.files=files


    # print("inputs.contentRef-----------------------",inputs.contentRef)
    # print("inputs.contentRef iddd-----------------------",inputs.contentRef.id)
    # print("inputs.contentRef-----------------------",inputs.contentRef["id"])
    
    filterVal = 'contentRef.id like "'+inputs.contentRef.id + \
        '" && system.contentType in ["altair.crm5.CustomFileEntity"]'
    print("filterVal :", filterVal)

    

    result = await Search.search(session=context.session,
                                 filter=filterVal,
                                 sort=[{
                                     "field": 'system.modifiedTime',
                                     "direction": "DESC"
                                 }],
                                 searchOptions={
                                     "returnCounts":True
                                 }
                                 )
    
    
    fileObjects=[]
    for ef in result.entities:        
        salman = {}
        # salman['contentRef'] = inputs.contentRef
        salman['id'] = ef.id
        salman['description'] = ef.description
        salman['islock'] = ef.isLock
        ss = {
            "id":ef.fileRef.id,
            "contentType":ef.fileRef.contentType
        }
        fileContent= await Content.getByRef(session=context.session,contentRef=ss)
        url = await Fs.getDownloadUrl(session=context.session,id=ef.fileRef.id)
        print(url.url)
        salman['url'] = url.url
        salman['fileObj'] = fileContent.content   
        
        fileObjects.append(salman)
        
    outputs.files = fileObjects
    outputs.count  = result.count

    