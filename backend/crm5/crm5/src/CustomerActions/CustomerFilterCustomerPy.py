# --------------------------------------------------------------------------------
# stubs for action CustomerFilterCustomerPy generated by Altair One content definition compiler.
# CustomerFilterCustomerPyPre  [optional] precheck and setup resources required for action.
# CustomerFilterCustomerPyRun  business logic of action and set outputs.
# CustomerFilterCustomerPyPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

# Created from PythonActionSrcTemplate

from altair.system import ActionContext, Search
from altair.crm1 import CustomerFilterCustomerPyInputs
from altair.crm1 import CustomerFilterCustomerPyOutputs


async def CustomerFilterCustomerPyRun(inputs: CustomerFilterCustomerPyInputs, outputs: CustomerFilterCustomerPyOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (CustomerFilterCustomerPyInputs): action inputs
        outputs (CustomerFilterCustomerPyOutputs): action outputs
        context (ActionContext): action context
    '''
    print("value is", inputs.val)
    print("pagination Obj :",inputs.paginationObj)

    # filterVal = 'name like "'+inputs.val+'" || email like "'+inputs.val+'" && system.contentType in ["altair.crm1.Customer"]'
    filterVal = 'name like "'+inputs.val + \
        '" && system.contentType in ["altair.crm2.Customer"]'
    print("filterVal :", filterVal)

    sortField = '"'+inputs.paginationObj['sortBy']+'"'
    sortDirection = '"'+inputs.paginationObj['sortDir']+'"'
    pageLimit = inputs.paginationObj['limit']
    pageOffset = inputs.paginationObj['offset']
    
    print("\nsortField :{} \nsortDirection : {} \n pageLimit: {} \npageOffset: {}".format(sortField,sortDirection,pageLimit,pageOffset))
    
    result = await Search.search(session=context.session,
                                 filter=filterVal,
                                 sort=[{
                                     "field": "system.createdTime",
                                     "direction": "DESC"
                                 }],
                                 pagination={
                                     "limit": pageLimit,
                                     "offset": pageOffset,
                                 }
                                 )
    outputs.customers = result.entities


#  # print("value is", inputs.val)
#     # filterVal = 'name like "'+inputs.val + \
#     #     '" && system.contentType in ["altair.crm1.Customer"]'
#     # print("filterVal :", filterVal)

#     # result = await Search.createSearchCriteria(
#     #     session=context.session,
#     #     name="customersList",
#     #     criteriaRecordList={
#     #             "field": "name",
#     #             "operator": "==",
#     #             "value": "Customer 1"
#     #         }

#     # )

#     # val1 = '"'+inputs.val+'"'
#     # print("val1 :", val1)

#     # result = await Search.createSearchCriteria(
#     #         session=context.session,
#     #         name="CriteriaExample1",
#     #         criteriaRecordList= [
#     #             {
#     #                 "field": "name",
#     #                 "operator": "like",
#     #                 "value": val1
#     #             }
#     #         ]
#     #     )

#     # print("result.criteriaRecordList :", result.criteriaRecordList)
#     # print("length is :",len(result.criteriaRecordList))
#     # outputs.customers = result.criteriaRecordList

#     # filterVal = 'name like "'+inputs.name + \
#     #     '" && system.contentType in ["altair.crm1.Customer"]'
#     # print("filterVal :", filterVal)
#     # result = await Search.search(session=context.session,
#     #                              filter= filterVal,
#     #                              sort=[{
#     #                                  "field": "system.createdTime",
#     #                                  "direction": "DESC"
#     #                              }],
#     #                              pagination={
#     #                                  "limit": 10,
#     #                                  "offset": 0
#     #                              }
#     #                              )
#     # outputs.items = result.entities

#     print("value is", inputs.name)
#     filterVal = 'name like "'+inputs.name + \
#         '" && system.contentType in ["altair.crm1.Customer"]'
#     print("filterVal :", filterVal)
#     result = await Search.search(session=context.session,
#                                  filter=filterVal,
#                                  sort=[{
#                                      "field": "system.createdTime",
#                                      "direction": "DESC"
#                                  }],
#                                  pagination={
#                                      "limit": 10,
#                                      "offset": 0
#                                  }
#                                  )
#     outputs.customers = result.entities
