# --------------------------------------------------------------------------------
# stubs for action CustomerFilterCustomers generated by Altair One content definition compiler.
# CustomerFilterCustomersPre  [optional] precheck and setup resources required for action.
# CustomerFilterCustomersRun  business logic of action and set outputs.
# CustomerFilterCustomersPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

# Created from PythonActionSrcTemplate

from altair.system import ActionContext, Search, Fs
from altair.crm5 import CustomerFilterCustomersInputs
from altair.crm5 import CustomerFilterCustomersOutputs


async def CustomerFilterCustomersRun(inputs: CustomerFilterCustomersInputs, outputs: CustomerFilterCustomersOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (CustomerFilterCustomersInputs): action inputs
        outputs (CustomerFilterCustomersOutputs): action outputs
        context (ActionContext): action context
    '''
    filterVal = 'name like "'+inputs.val + \
        '" && system.contentType in ["altair.crm5.Customer"]'
    print("filterVal :", filterVal)

    sortField = inputs.paginationObj['sortBy']
    sortDirection = inputs.paginationObj['sortDir']
    pageLimit = inputs.paginationObj['limit']
    pageOffset = inputs.paginationObj['offset']

    result = await Search.search(session=context.session,
                                 filter=filterVal,
                                 sort=[{
                                     "field": sortField,
                                     "direction": sortDirection
                                 }],
                                 pagination={
                                     "limit": pageLimit,
                                     "offset": pageOffset,
                                 },
                                 searchOptions={
                                     "returnCounts":True
                                 }
                                 )
    outputs.customers = result.entities
    outputs.totalCustomersCount = result.count
