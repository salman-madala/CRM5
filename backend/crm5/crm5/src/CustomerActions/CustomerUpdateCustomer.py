# --------------------------------------------------------------------------------
# stubs for action CustomerUpdateCustomer generated by Altair One content definition compiler.
# CustomerUpdateCustomerPre  [optional] precheck and setup resources required for action.
# CustomerUpdateCustomerRun  business logic of action and set outputs.
# CustomerUpdateCustomerPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

#Created from PythonActionSrcTemplate

from altair.system import ActionContext
from altair.crm5 import CustomerUpdateCustomerInputs
from altair.crm5 import CustomerUpdateCustomerOutputs
from altair.system.Content import Content,ContentRef


async def CustomerUpdateCustomerRun(inputs: CustomerUpdateCustomerInputs, outputs: CustomerUpdateCustomerOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (CustomerUpdateCustomerInputs): action inputs
        outputs (CustomerUpdateCustomerOutputs): action outputs
        context (ActionContext): action context
    '''
    try:
        # output = await Content.findByAttributes(
        #     session=context.session,
        #     contentType='altair.crm1.Customer',
        #     data={"_key": inputs.id}
        # )
        # item = output.contents[0]
        # item.set("name", inputs.customer['name'])
        # item.set("email", inputs.customer['email'])
        # item = await item.update()
        # outputs.customer = 
        
        content1Ref = ContentRef(session=context.session)
        print("customerRef.......................................................:", inputs.id)
        content1Ref.id = inputs.id
        content1Ref.contentType = inputs.customer['system']['contentType']
        getByRefOutputs = await Content.getByRef(contentRef=content1Ref, session=context.session)
        content1 = getByRefOutputs.content
        print("content name:", inputs.customer['name'])
        content1.set("name", inputs.customer['name'])
        content1.set("email", inputs.customer['email'])
        content1.set("imageId", inputs.customer['imageId'])
        
        print("content1",content1)
        
        outputs.customer =  await content1.update()
    except Exception as e:
        import traceback
        print(traceback.format_exc())

