# --------------------------------------------------------------------------------
# stubs for action OrderCreateOrder generated by Altair One content definition compiler.
# OrderCreateOrderPre  [optional] precheck and setup resources required for action.
# OrderCreateOrderRun  business logic of action and set outputs.
# OrderCreateOrderPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

# Created from PythonActionSrcTemplate

from altair.system import ActionContext, Content, ContentRef
from altair.crm5 import OrderCreateOrderInputs
from altair.crm5 import OrderCreateOrderOutputs, Order


async def OrderCreateOrderRun(inputs: OrderCreateOrderInputs, outputs: OrderCreateOrderOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (OrderCreateOrderInputs): action inputs
        outputs (OrderCreateOrderOutputs): action outputs
        context (ActionContext): action context
    '''

    order = Order(session=context.session)
    # outputs.orderRef = content
    order.name = inputs.name
    order.contact = inputs.contact
    order.address = inputs.address
    await context.session.save()

    # order.addOrder_items(order_items=inputs.items)
    # order.setOrder_customer(order_customer=inputs.customerRef)

    # adding order_items relation
    itemRefContents = []
    for item in inputs.items:
        testRef = ContentRef(session=context.session)
        testRef.id = item['id']
        testRef.contentType = item['system']['contentType']
        itemRef = await Content.getByRef(session=context.session, contentRef=testRef)
        print("getByRefOutputs : ", itemRef.content)
        itemRefContents.append(itemRef.content)
        # order.addRelation(to=itemRef.content, relationType="order_items")
    
    await order.addOrder_items(order_items=itemRefContents)  # create relation for one time for all items.contnet
    
    
    # adding order_customer relation
    customerRef = ContentRef(session=context.session)
    customerRef.id = inputs.customerRef['id']
    customerRef.contentType = inputs.customerRef['system']['contentType']
    customer = await Content.getByRef(session=context.session, contentRef=customerRef)
    # order.addRelation(to=customer.content, relationType="order_customer")
    await order.setOrder_customer(order_customer=customer.content)  # here we are using set methods for create relation

    outputs.orderRef = order
