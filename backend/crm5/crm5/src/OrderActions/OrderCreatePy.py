# --------------------------------------------------------------------------------
# stubs for action OrderCreatePy generated by Altair One content definition compiler.
# OrderCreatePyPre  [optional] precheck and setup resources required for action.
# OrderCreatePyRun  business logic of action and set outputs.
# OrderCreatePyPost [optional] postchecks and free resources aquired by action.
# *** DO NOT MODIFY STUB DEFINITIONS ***.
# --------------------------------------------------------------------------------

# Created from PythonActionSrcTemplate

from altair.system import ActionContext, Content, ActionExecOptions, ContentRef
from altair.crm1 import OrderCreatePyInputs
from altair.crm1 import OrderCreatePyOutputs, Order


async def OrderCreatePyRun(inputs: OrderCreatePyInputs, outputs: OrderCreatePyOutputs, context: ActionContext):
    '''Implement business logic of action and set outputs

    Args:
        inputs (OrderCreatePyInputs): action inputs
        outputs (OrderCreatePyOutputs): action outputs
        context (ActionContext): action context
    '''
    # order = Order(session=context.session)
    # content = await Content.create(session=context.session, contentType="altair.crm2.Order", data=inputs)

    # for item in inputs.items:
    #     # val = item
    #     # print("contentType",val['system']['contentType'])
    #     # print("content.............",val)
    #     # content.getRelations(direction="IN", relationNames=["order_items"])
    #     # content.addOrder_items(val)
    #     # await context.session.save();
    #     #  if you not defined relation

    #     itemRef = await Order.getByRef(session=context.session, contentRef=item)
    #     print("itemRef : ", itemRef)
    #     order.addRelation(to=itemRef.content, relationType="order_items")

    # print("customer Ref:", inputs.customerRef)
    # testRef1 = ContentRef(session=context.session)
    # testRef1.id = inputs.customerRef.id
    # testRef1.contentType = "altair.crm2.Customer"
    # getByRefOutputs = await Content.getByRef(contentRef=testRef1, session=context.session)
    # print("getByRefOutputs:", getByRefOutputs)
    # # content1 = getByRefOutputs.content
    # # content1.addCustomer_orders(content)
    # getByRefOutputs.content.addRelation(to= content, relationType= "customer_orders")

    # await context.session.save()

    # outputs.orderRef = content
    order = Order(session=context.session)
    await Content.create(session=context.session, contentType="altair.crm2.Order", data={
        "name":inputs.name,
        "contact":inputs.contact,
        "address":inputs.address
    })
    
    
    # adding order_items relation
    for item in inputs.items:
        testRef = ContentRef(session=context.session)
        testRef.id = item['id']
        testRef.contentType = item['system']['contentType']
        itemRef = await Content.getByRef(session=context.session, contentRef=testRef)
        print("getByRefOutputs : ", itemRef.content)
        order.addRelation(to=itemRef.content, relationType="order_items")

    # adding order_customer relation
    customerRef = ContentRef(session=context.session)
    customerRef.id = inputs.customerRef['id']
    customerRef.contentType = inputs.customerRef['system']['contentType']
    customer = await Content.getByRef(session=context.session, contentRef=customerRef)
    order.addRelation(to=customer.content, relationType="order_customer")

    await context.session.save()
    print("order :",order)
    outputs.orderRef = order

