// --------------------------------------------------------------------------------
// stubs for action OrderCreateOrder generated by Altair One content definition compiler.
// OrderCreateOrderPre  [optional] precheck and setup resources required for action.
// OrderCreateOrderRun  business logic of action and set outputs.
// OrderCreateOrderPost [optional] postchecks and free resources aquired by action.
// *** DO NOT MODIFY STUB DEFINITIONS ***.
// --------------------------------------------------------------------------------
//Created from JsActionSrcTemplate
/**
 * @typedef {import("../../apis/js/altair/crm1/OrderActions/OrderCreateOrder").OrderCreateOrderInputs} OrderCreateOrderInputs
 * @typedef {import("../../apis/js/altair/crm1/OrderActions/OrderCreateOrder").OrderCreateOrderOutputs} OrderCreateOrderOutputs
 * @typedef {import("@altair/system").ActionContext} ActionContext
 */


/**
 * Implement business logic of action and set outputs
 * 
 * @param { OrderCreateOrderInputs} inputs action inputs
 * @param { OrderCreateOrderOutputs} outputs action outputs
 * @param {ActionContext} context action context
 * 
 */
async function  OrderCreateOrderRun(inputs, outputs, context){

     const Content = require("@altair/system").Content;
     const ActionExecOptions = require("@altair/system").ActionExecOptions
     var session = context.session;
     var {content} = await Content.create({session, contentType: "altair.crm1.Order", data: inputs});

     const testRef = require("@altair/system").ContentRef;
     for(var i = 0; i < (inputs.items).length; i++){
          var val = inputs.items[i]
          val.contentType = val.system.contentType;

          console.log("content............."+val)
          content.getRelations({direction: "IN", relationNames: ["order_items"]}); 
          content.addOrder_items(val);
          // await session.save();
          // if you not defined relation
          // const rel = content.addRelation({to:val, relationType: "order_items"});
     }

     console.log("customer Ref:", inputs.customerRef);
     const ContentRef = require("@altair/system").ContentRef;
     let testRef1 = new ContentRef({session:context.session})
        testRef1.id = inputs.customerRef.id
        testRef1.contentType = "altair.crm1.Customer"
     let getByRefOutputs = await Content.getByRef({ contentRef: testRef1, session: context.session })
     console.log("getByRefOutputs:", getByRefOutputs);
     let content1 = getByRefOutputs.content;
     content1.addCustomer_orders(content);
     // content1.addRelation({to:content, relationType: "customer_orders"}); 

     await session.save();

     outputs.orderRef = content;

     console.log("file path .............................................", inputs.invoice)

     if(inputs.invoice != "") content.invoiceUpload(session, "UploadFileTest_" + Date.now(), inputs.invoice, ActionExecOptions(execEnv="current"));

     await session.save();
}


module.exports = {
     OrderCreateOrderRun}