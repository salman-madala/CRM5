// --------------------------------------------------------------------------------
// stubs for action OrderInvoiceUpload generated by Altair One content definition compiler.
// OrderInvoiceUploadPre  [optional] precheck and setup resources required for action.
// OrderInvoiceUploadRun  business logic of action and set outputs.
// OrderInvoiceUploadPost [optional] postchecks and free resources aquired by action.
// *** DO NOT MODIFY STUB DEFINITIONS ***.
// --------------------------------------------------------------------------------
//Created from JsActionSrcTemplate
/**
 * @typedef {import("../../apis/js/altair/crm1/OrderActions/OrderInvoiceUpload").OrderInvoiceUploadInputs} OrderInvoiceUploadInputs
 * @typedef {import("../../apis/js/altair/crm1/OrderActions/OrderInvoiceUpload").OrderInvoiceUploadOutputs} OrderInvoiceUploadOutputs
 * @typedef {import("@altair/system").ActionContext} ActionContext
 */


/**
 * Implement business logic of action and set outputs
 * 
 * @param { OrderInvoiceUploadInputs} inputs action inputs
 * @param { OrderInvoiceUploadOutputs} outputs action outputs
 * @param {ActionContext} context action context
 */

async function OrderInvoiceUploadRun(inputs, outputs, context) {

     const Fs = require("@altair/system").Fs;
     const session = context.session;
     const parentDir = (await Fs.info({ session, path: "/root" })).content;
     const fs = require('fs');
     const f = Date.now().toString();
     let filePath;
     // fileEntity collections
     if (!global.window) {
          const fs = require('fs');
          const os = require('os');
          filePath = 'D:\index.js';
          fs.writeFileSync(filePath, f);
     } else {
          filePath = 'D:\index.js';
     }

     const action = await parentDir.uploadFile({
          filePath,
          contentType: "altair.system.FileEntity",
          name: "UploadFileTest_" + Date.now() + ".js",
          data: { "something": Date.now() }
     });
     const { file } = await action.waitForCompletion();
     // expect(file instanceof FileEntity).to.be.equal(true);

     content.addOrder_items(val);
     // await session.save();
     // if you not defined relation
     const rel = content.addRelation({ to: val, relationType: "order_items" });



}


module.exports = {
     OrderInvoiceUploadRun
}