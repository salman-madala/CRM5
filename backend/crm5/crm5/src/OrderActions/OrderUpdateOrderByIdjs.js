// --------------------------------------------------------------------------------
// stubs for action OrderUpdateOrderByIdjs generated by Altair One content definition compiler.
// OrderUpdateOrderByIdjsPre  [optional] precheck and setup resources required for action.
// OrderUpdateOrderByIdjsRun  business logic of action and set outputs.
// OrderUpdateOrderByIdjsPost [optional] postchecks and free resources aquired by action.
// *** DO NOT MODIFY STUB DEFINITIONS ***.
// --------------------------------------------------------------------------------
//Created from JsActionSrcTemplate
/**
 * @typedef {import("../../apis/js/altair/crm1/OrderActions/OrderUpdateOrderByIdjs").OrderUpdateOrderByIdjsInputs} OrderUpdateOrderByIdjsInputs
 * @typedef {import("../../apis/js/altair/crm1/OrderActions/OrderUpdateOrderByIdjs").OrderUpdateOrderByIdjsOutputs} OrderUpdateOrderByIdjsOutputs
 * @typedef {import("@altair/system").ActionContext} ActionContext
 */


/**
 * Implement business logic of action and set outputs
 * 
 * @param { OrderUpdateOrderByIdjsInputs} inputs action inputs
 * @param { OrderUpdateOrderByIdjsOutputs} outputs action outputs
 * @param {ActionContext} context action context
 */
async function  OrderUpdateOrderByIdjsRun(inputs, outputs, context){

     const Content = require("@altair/system").Content;

     const session = context.session;
     const order = inputs.orderRef;
     console.log("order value",order);

     const output = await Content.findByAttributes({session: session,
           contentType: "altair.crm1.Order",
           data: {_key: order.id}
     });
     console.log("Output value",output);
     var contentVal = output.get('contents')[0];

     console.log("Content value",contentVal);
     console.log("before student setting details---------\n", contentVal);
     contentVal.set("name", order.name);
     contentVal.set("contact", order.contact);
     contentVal.set("address", order.address);

     console.log("----------------------------------------------------------------")
     console.log("before update : ", contentVal)
     console.log("----------------------------------------------------------------")

     await contentVal.update({})

}


module.exports = {
     OrderUpdateOrderByIdjsRun}